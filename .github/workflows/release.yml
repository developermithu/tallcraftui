name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Get current version
        id: current_version
        run: echo "CURRENT_VERSION=$(cat version.txt)" >> $GITHUB_ENV

      - name: Bump version
        id: bump_version
        run: |
          CURRENT_VERSION=$(cat version.txt)
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo $NEW_VERSION > version.txt
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Generate changelog
        id: generate_changelog
        run: |
          NEW_VERSION=$NEW_VERSION
          DATE=$(date +'%Y-%m-%d')
          echo "## [$NEW_VERSION] - $DATE" >> CHANGELOG.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD >> CHANGELOG.md
          echo "" >> CHANGELOG.md

      - name: Commit changes
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add CHANGELOG.md version.txt
          git commit -m "chore(release): $NEW_VERSION [skip ci]"
          git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
          git push origin main --tags

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.NEW_VERSION }}"
          release_name: "Release v${{ env.NEW_VERSION }}"
          body: |
            ## Changelog
            ${{ steps.generate_changelog.outputs.changelog }}
          draft: false
          prerelease: false
